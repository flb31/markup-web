$spaces: (
  'margin' : '#{$margin}',
  'half--margin' : '#{$half--margin}',
  'double--margin' : '#{$double--margin}',
  'quarter--margin' : '#{$quarter--margin}',
  'none--margin' : '#{$none--margin}',
  
  'padding' : '#{$padding}',
  'half--padding' : '#{$half--padding}',
  'double--padding' : '#{$double--padding}',
  'quarter--padding' : '#{$quarter--padding}',
  'none--padding' : '#{$none--padding}',
  
) !default;

$total-corners : 7;

$corners: (
  '' '',
  'top' '--top',
  'bottom' '--bottom',
  'left' '--left',
  'right' '--right',
  'horizontal' '--horizontal',
  'vertical' '--vertical',
) !default;


$dimensions: (
  '' '',
  'half' '--half',
  'double' '--double',
  'quarter' '--quarter'
) !default;

$nones: (
  '' '',
  'none' '--none'
) !default;

@mixin spaces-responsive($type, $is_responsive){
	
  $__flag_responsive : 'true';
  
  @each $breakpoint in $breakpoints {
    $device_name: nth($breakpoint, 1);
    $responsive: nth($breakpoint, 2);
    $__prefix : '.' + $device_name + '--';
    
    
    @if $__flag_responsive == 'true' {
      
      @if $is_responsive == 'false' {
        $__prefix : '.';
        $__flag_responsive : 'false'; //one iteration!!
        $device_name: 'all';
      }
      
      /* ----Device #{$device_name} #{$type}----*/
    
      @each $none in $nones{
        $none_key: nth($none, 1);
        $none_value: nth($none, 2);
        $__counter : 0;

        @each $dimension in $dimensions{
          $dimension_key: nth($dimension, 1);
          $dimension_value: nth($dimension, 2);

          @each $corner in $corners{
            $corner_key: nth($corner, 1);
            $corner_value: nth($corner, 2);

            @if $__counter < $total-corners {

              $value : '';
              
              @if $none_key == 'none' {
                $value : $none_key + '--' + $type;
                $dimension_value : '';
                $__counter: $__counter + 1; //Only for none property
              } @else {

                @if( str-length($dimension_key) > 0 ) {
                  $value : $dimension_key + '--' + $type;
                } @else {
                  $value : $type;
                } 
              }

              #{$__prefix}#{$type}#{$dimension_value}#{$corner_value}#{$none_value}{
                @if $is_responsive == 'true' {
                  @media #{$responsive}{
                    @include print-value-spaces($type, $corner_key, $corner_value, $value);
                  }
                }@else{
                  @include print-value-spaces($type, $corner_key, $corner_value, $value);
                }
              }
            } //end if
          }
        }
      }
    }
  }
}


@mixin print-value-spaces($type, $corner_key, $corner_value, $value){
  
  $var_value : map-get($spaces, #{$value}) !important;
  
  @if $corner_key == 'horizontal'{
    $param-top : $type + '-left';
    $param-bottom : $type + '-right';
    #{$param-top}: #{$var_value}; #{$param-bottom}: #{$var_value};

  } @elseif $corner_key == 'vertical'{
    $param-top : $type + '-top';
    $param-bottom : $type + '-bottom';

    #{$param-top}: #{$var_value}; #{$param-bottom}: #{$var_value};

  } @else{

    $corner_str : '';
    @if( str-length($corner_key) > 0 ){
      $corner_str : str-slice($corner_value, 2);
    }

    $param : $type + $corner_str;
    #{$param}: #{$var_value};
  }
  
}

@include spaces-responsive('margin', 'false');
@include spaces-responsive('padding', 'false');

@include spaces-responsive('margin', 'true');
@include spaces-responsive('padding', 'true');